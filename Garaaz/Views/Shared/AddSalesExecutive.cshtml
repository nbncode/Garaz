@model Garaaz.Models.clsDistributorUserInfo
@using Garaaz.Models;
@{

    ViewBag.Title = "Add Sales Executive";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="kt-subheader-search">
    <h3 class="kt-subheader-search__title">
        Sales Executive Master
    </h3>
</div>

<header class="ribbon">
    <h2>&nbsp;</h2>
</header>
<div class="page-content">
    @{Html.RenderPartial("alerts");}

    <div class="kt-content  kt-grid__item kt-grid__item--fluid" id="kt_content">
        <div class="row">
            <div class="col-md-12">
                <!--begin::Portlet-->
                <div class="kt-portlet">
                    <div class="kt-portlet__head">
                        <div class="kt-portlet__head-label">
                            <h3 class="kt-portlet__head-title">
                                Add/Edit Sales Executive
                            </h3>
                        </div>
                        <div class="kt-portlet__head-toolbar">
                            <div class="kt-portlet__head-wrapper">
                                <div class="kt-portlet__head-actions">
                                    <a href="@Request.UrlReferrer" class="btn btn-brand btn-elevate btn-icon-sm">
                                        <i class="la la-step-backward"></i>
                                        Back
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>

                    @using (Html.BeginForm())
                    {
                        <div class="kt-form">
                            <div class="kt-portlet__body">
                                <input type="hidden" name="distributorId" value="@ViewBag.distributorId" />
                                @if (Model != null && !string.IsNullOrEmpty(Model.UserId))
                                {
                                    @Html.HiddenFor(model => model.Email)
                                    @Html.HiddenFor(model => model.UserId)
                                    @Html.HiddenFor(model => model.PhoneNumber)
                                    @Html.HiddenFor(model => model.Password)
                                    @Html.HiddenFor(model => model.Latitude)
                                    @Html.HiddenFor(model => model.Longitude)
                                    @Html.HiddenFor(model => model.Role)
                                }
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Employee Code <em>*</em></label>
                                            @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>First Name <em>*</em></label>
                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Last Name <em>*</em></label>
                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Address <em>*</em></label>
                                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <input type="hidden" id="Role" name="Role" value="@Constants.SalesExecutive" />                                
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Designations </label>
                                            @Html.EditorFor(model => model.Designations, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Select RoIncharge</label>
                                            @Html.DropDownListFor(x => x.RoInchargeId, new SelectList(ViewBag.RoIncharge, "Value", "Text"), new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.RoInchargeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                    <div class="row">
                                        @if (Model == null || string.IsNullOrEmpty(Model.UserId))
                                        {
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label>Email </label>
                                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label>Phone Number(User Name) <em>*</em></label>
                                                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control required" } })
                                                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-group">
                                                    <label>Password <em>*</em></label>
                                                    <div class="input-group" id="show_hide_password">
                                                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control required", autocomplete = "off" } })
                                                        <div class="input-group-append">
                                                            <span class="input-group-text"><i class="fa fa-eye-slash" aria-hidden="true"></i></span>
                                                        </div>
                                                    </div>
                                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        }
                                    </div>

                                </div>
                        </div>

                        <div class="kt-portlet__foot">
                            <div class="kt-form__actions">
                                <button type="submit" class="btn btn-primary">Submit</button>
                                <button type="reset" class="btn btn-secondary">Cancel</button>
                            </div>
                        </div>
                    }

                </div>
                <!--end::Portlet-->
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            window.onload = ActivateAutocomplete();

            function ActivateAutocomplete() {
                var input = document.getElementById('Address');

                console.log(input);

                var options = {
                    types: ['(cities)'],
                    componentRestrictions: { country: 'in' }
                };
                autocomplete = new google.maps.places.Autocomplete(input, options);
                google.maps.event.addListener(autocomplete, 'place_changed', function () {
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {

                        return;
                    }

                    lat = place.geometry.location.lat();
                    lng = place.geometry.location.lng();
                    $("#Latitude").val(lat);
                    $("#Longitude").val(lng);
                    console.log(lat, lng);
                });

            }
        });
    </script>
}