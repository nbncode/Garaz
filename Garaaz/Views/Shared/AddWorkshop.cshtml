@model Garaaz.Models.clsWorkshop
@using Garaaz.Models;
@{
    ViewBag.Title = "Add Customer";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var clsSchema = new ClsSchema();
    var StateList = clsSchema.GetStateList();

    var cls = new workshop();
    var category = cls.GetWorkshopCategory();
    var insuranceCompanies = cls.GetInsuranceCompanies();
    var outletList = (ViewBag.Outlets as SelectList)?.Items as List<SelectListItem>;
    outletList?.Insert(0, new SelectListItem() { Value = "", Text = "-- Select Outlet --" });
}

<div class="kt-subheader-search">
    <h3 class="kt-subheader-search__title">
        Customers
    </h3>
</div>


<header class="ribbon">
    <h2>&nbsp;</h2>
</header>


<div class="page-content">
    @{Html.RenderPartial("alerts");}

    <div class="row">
        <div class="col-md-12">
            <!--begin::Portlet-->
            <div class="kt-portlet">
                <div class="kt-portlet__head">
                    <div class="kt-portlet__head-label">
                        <h3 class="kt-portlet__head-title">
                            Add/Edit Customer
                        </h3>
                    </div>
                    <div class="kt-portlet__head-toolbar">
                        <div class="kt-portlet__head-wrapper">
                            <div class="kt-portlet__head-actions">
                                <a href="/@ViewBag.Controller/Workshop?distributorId=@ViewBag.distributorId" class="btn btn-brand btn-elevate btn-icon-sm">
                                    <i class="la la-step-backward"></i>
                                    Back
                                </a>
                            </div>
                        </div>
                    </div>
                </div>

                @using (Html.BeginForm())
                {
                    <div class="kt-form">
                        <div class="kt-portlet__body">
                            @Html.HiddenFor(model => model.Role)
                            <input type="hidden" name="distributorId" value="@ViewBag.distributorId" />
                            @if (Model != null && !string.IsNullOrEmpty(Model.UserId))
                            {
                                @Html.HiddenFor(model => model.Email)
                                @Html.HiddenFor(model => model.UserId)
                                @Html.HiddenFor(model => model.PhoneNumber)
                                @Html.HiddenFor(model => model.Password)
                                @Html.HiddenFor(model => model.Latitude)
                                @Html.HiddenFor(model => model.Longitude)
                                @Html.HiddenFor(model => model.InsuranceCompanies)

                            }

                            <div class="row">
                                <div class="col-sm-12">
                                    <h2>Contact Information</h2>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>First Name <em>*</em></label>
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Last Name <em>*</em></label>
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" name="Role" value="Abc" />

                            @if (Model == null || string.IsNullOrEmpty(Model.UserId))
                            {
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Email</label>
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Phone Number(User Name) <em>*</em></label>
                                            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control required" } })
                                            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                        </div>

                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label>Password <em>*</em></label>
                                            <div class="input-group" id="show_hide_password">
                                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control required", autocomplete = "off" } })
                                                <div class="input-group-append">
                                                    <span class="input-group-text"><i class="fa fa-eye-slash" aria-hidden="true"></i></span>
                                                </div>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <div class="col-sm-12">
                                    <h2>Customer Information</h2>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>WorkShop Code <em>*</em></label>
                                        @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">

                                        <label>WorkShop Name <em>*</em></label>
                                        @Html.EditorFor(model => model.WorkShopName, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.WorkShopName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Billing Name<em>*</em></label>
                                        @Html.EditorFor(model => model.BillingName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.BillingName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>GSTIN</label>
                                        @Html.EditorFor(model => model.Gstin, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Gstin, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Address <em>*</em></label>
                                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>City <em>*</em></label>
                                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control required" } })
                                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>State <em>*</em></label>
                                        @Html.DropDownListFor(model => model.State, StateList, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Pincode</label>
                                        @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Year of Establishment</label>
                                        @Html.EditorFor(model => model.YearOfEstablishment, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.YearOfEstablishment, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Landline Number</label>
                                        @Html.EditorFor(model => model.LandlineNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.LandlineNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Critical Outstanding Days<em>*</em></label>
                                        @Html.EditorFor(model => model.CriticalOutstandingDays, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CriticalOutstandingDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label> Credit Limit</label>
                                        @Html.EditorFor(model => model.CreditLimit, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreditLimit, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3" style="display: none;">
                                    <div class="form-group">
                                        @Html.CheckBoxFor(model => model.IsMorethanOneBranch, new { @class = "icheck_n morethanOneBranch form-control" })
                                        <label>Do you have more then 1 branch?</label>
                                    </div>
                                </div>


                                <div class="col-md-3 outletcombo">
                                    <div class="form-group">
                                        <label>Select Outlet <em>*</em></label>
                                        @Html.DropDownListFor(x => x.OutletId, new SelectList(ViewBag.Outlets, "Value", "Text"), new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.OutletId, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                            </div>

                            <div class="row">
                                <div class="col-sm-12">
                                    <h2>WorkShop Other Information</h2>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label> Workshop Type </label>
                                        @Html.EditorFor(model => model.WorkshopType, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.WorkshopType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Total Owners </label>
                                        @Html.EditorFor(model => model.TotalOwners, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Total Employees</label>
                                        @Html.EditorFor(model => model.TotalEmployees, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TotalEmployees, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Total ChiefMechanics</label>
                                        @Html.EditorFor(model => model.TotalChiefMechanics, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.TotalChiefMechanics, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Two Post Lifts</label>
                                        @Html.EditorFor(model => model.TwoPostLifts, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Monthly Vehicles Serviced</label>
                                        @Html.EditorFor(model => model.MonthlyVehiclesServiced, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MonthlyVehiclesServiced, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Monthly Parts Purchase</label>
                                        @Html.EditorFor(model => model.MonthlyPartPurchase, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MonthlyPartPurchase, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Monthly Consumables Purchase</label>
                                        @Html.EditorFor(model => model.MonthlyConsumablesPurchase, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.MonthlyConsumablesPurchase, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Jobs Undertaken</label>
                                        @Html.EditorFor(model => model.JobsUndertaken, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.JobsUndertaken, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label> Make</label>
                                        @Html.EditorFor(model => model.Make, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Make, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label> Garaaz Area (Sq.ft) </label>
                                        @Html.EditorFor(model => model.GaraazArea, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.GaraazArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Website</label>
                                        @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Working Hours</label>
                                        @Html.EditorFor(model => model.WorkingHours, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.WorkingHours, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Weekly Off Day</label>
                                        @Html.EditorFor(model => model.WeeklyOffDay, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.WeeklyOffDay, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label> Category Name</label>
                                        @Html.DropDownListFor(model => model.CategoryName, category, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label>Insurance Companies </label>
                                        <select class="form-control multiselect Insurance-Companies" multiple>
                                            @{
                                                if (insuranceCompanies != null)
                                                {
                                                    foreach (var Item in insuranceCompanies)
                                                    {
                                                        if (Model != null && !string.IsNullOrEmpty(Model.InsuranceCompanies))
                                                        {
                                                            var values = Model.InsuranceCompanies.Split(',');
                                                            var IsExists = values.Contains(Item.Value);
                                                            if (IsExists)
                                                            {
                                                                <option value="@Item.Value" selected>@Item.Text</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@Item.Value">@Item.Text</option>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <option value="@Item.Value">@Item.Text</option>
                                                        }
                                                    }
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-12">
                                    <h2>Premise and Others</h2>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @{ var check = "";}
                                        @if (Model != null && !string.IsNullOrEmpty(Model.Premise))
                                        {
                                            if (!string.IsNullOrEmpty(Model.Premise) && Model.Premise == "Rented")
                                            {
                                                check = "checked";
                                            }
                                        }
                                        <input type="radio" name="Premise" class="icheck_n Role form-control" value="Owned" checked><label style="margin-right:15px;">Owned</label>

                                        <input type="radio" name="Premise" class="icheck_n form-control" value="Rented" @check><label>Rented</label>

                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.CheckBoxFor(model => model.WashingBay, new { @class = "icheck_n Role form-control" })
                                        <label>WashingBay</label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.CheckBoxFor(model => model.PaintBooth, new { @class = "icheck_n Role form-control" })
                                        <label>PaintBooth </label>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.CheckBoxFor(model => model.ScanningAndToolKit, new { @class = "icheck_n Role form-control" })
                                        <label>Scanning And ToolKit  </label>
                                    </div>
                                </div>

                            </div>


                        </div>
                    </div>

                    <div class="kt-portlet__foot">
                        <div class="kt-form__actions">
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="reset" class="btn btn-secondary">Cancel</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function ()
        {
            $('.morethanOneBranch').iCheck('check');
            //if ($('#IsMorethanOneBranch:checked').length > 0) {
            //    $(".outletcombo").css("display", "block");
            //    $(".outletcombo label").html("Select Outlet <em>*</em>")
            //    $("#OutletId").rules("add", {
            //        required: true,
            //        messages: {
            //            required: "The OutletId field is required."
            //        }
            //    });
            //}
            //else {
            //    $(".outletcombo label").html("Select Outlet")
            //    $("#OutletId").rules('remove');
            //}
            $('#IsMorethanOneBranch').on('ifChecked', function ()
            {
                $(".outletcombo label").html("Select Outlet <em>*</em>")
                $(".outletcombo").css("display", "block");
                $("#OutletId").rules("add", {
                    required: true,
                    messages: {
                        required: "The OutletId field is required."
                    }
                });
            }).on('ifUnchecked', function ()
            {
                $(".outletcombo").css("display", "none");
                $(".outletcombo label").html("Select Outlet")
                $("#OutletId").rules('remove');
            });

            window.onload = ActivateAutocomplete();

            function ActivateAutocomplete()
            {
                var input = document.getElementById('Address');

                console.log(input);

                var options = {
                    types: ['(cities)'],
                    componentRestrictions: { country: 'in' }
                };
                autocomplete = new google.maps.places.Autocomplete(input, options);
                google.maps.event.addListener(autocomplete, 'place_changed', function ()
                {
                    var place = autocomplete.getPlace();
                    if (!place.geometry)
                    {

                        return;
                    }

                    lat = place.geometry.location.lat();
                    lng = place.geometry.location.lng();
                    $("#Latitude").val(lat);
                    $("#Longitude").val(lng);
                    console.log(lat, lng);
                });

            }

            // Select gender during edit based on database record
            var url = window.location.href;
            if (url.indexOf('edit') != -1)
            {
                var selectedGender = $.trim($('#iGender').val());
                $('select[name^="Gender"] option[value="' + selectedGender + '"]').attr("selected", "selected");
            }
            $(".Insurance-Companies").on("change", function ()
            {
                GetIcompanies();
            });
            function GetIcompanies()
            {
                var Icompany = "";
                $(".Insurance-Companies option:selected").each(function ()
                {
                    if (Icompany == "")
                    {
                        Icompany = $(this).val();
                    } else
                    {
                        Icompany = Icompany + "," + $(this).val();
                    }
                })
                console.log("Insurancecompany", Icompany);
                $("#InsuranceCompanies").val(Icompany);
            }
        });
    </script>
}
