//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Garaaz.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class garaazEntities : DbContext
    {
        public garaazEntities()
            : base("name=garaazEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AssuredGift> AssuredGifts { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<CategoryScheme> CategorySchemes { get; set; }
        public virtual DbSet<DistributorBrand> DistributorBrands { get; set; }
        public virtual DbSet<Distributor> Distributors { get; set; }
        public virtual DbSet<DistributorUser> DistributorUsers { get; set; }
        public virtual DbSet<DistributorUserInfo> DistributorUserInfoes { get; set; }
        public virtual DbSet<DistributorWorkShop> DistributorWorkShops { get; set; }
        public virtual DbSet<GiftManagement> GiftManagements { get; set; }
        public virtual DbSet<LoginTime> LoginTimes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OutletsUser> OutletsUsers { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<QualifyCriteria> QualifyCriterias { get; set; }
        public virtual DbSet<SchemeLocation> SchemeLocations { get; set; }
        public virtual DbSet<TicketOfJoy> TicketOfJoys { get; set; }
        public virtual DbSet<UserFeature> UserFeatures { get; set; }
        public virtual DbSet<UserWorkshop> UserWorkshops { get; set; }
        public virtual DbSet<Variant> Variants { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<WorkshopBrand> WorkshopBrands { get; set; }
        public virtual DbSet<WorkShopLabelScheme> WorkShopLabelSchemes { get; set; }
        public virtual DbSet<WorkshopsUser> WorkshopsUsers { get; set; }
        public virtual DbSet<DeliveryAddress> DeliveryAddresses { get; set; }
        public virtual DbSet<BannerMobile> BannerMobiles { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<DailyStock> DailyStocks { get; set; }
        public virtual DbSet<DistributorLocation> DistributorLocations { get; set; }
        public virtual DbSet<FocusPart> FocusParts { get; set; }
        public virtual DbSet<LabelCriteria> LabelCriterias { get; set; }
        public virtual DbSet<MgaCatalougeProduct> MgaCatalougeProducts { get; set; }
        public virtual DbSet<ProductAvailabilityType> ProductAvailabilityTypes { get; set; }
        public virtual DbSet<RoSalesExecutive> RoSalesExecutives { get; set; }
        public virtual DbSet<SalesExecutiveWorkshop> SalesExecutiveWorkshops { get; set; }
        public virtual DbSet<TempOrder> TempOrders { get; set; }
        public virtual DbSet<TempOrderDetail> TempOrderDetails { get; set; }
        public virtual DbSet<GiftsCoupon> GiftsCoupons { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<FeaturesRole> FeaturesRoles { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<OrderTable> OrderTables { get; set; }
        public virtual DbSet<CustomerBackOrder> CustomerBackOrders { get; set; }
        public virtual DbSet<StockColor> StockColors { get; set; }
        public virtual DbSet<DefaultWinner> DefaultWinners { get; set; }
        public virtual DbSet<WalletTransaction> WalletTransactions { get; set; }
        public virtual DbSet<WorkshopCoupon> WorkshopCoupons { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<AccountLedger> AccountLedgers { get; set; }
        public virtual DbSet<MailTemplate> MailTemplates { get; set; }
        public virtual DbSet<Support> Supports { get; set; }
        public virtual DbSet<SupportQuery> SupportQueries { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<GeneralPurpose> GeneralPurposes { get; set; }
        public virtual DbSet<BestSeller> BestSellers { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<GrowthPercentage> GrowthPercentages { get; set; }
        public virtual DbSet<CashbackRange> CashbackRanges { get; set; }
        public virtual DbSet<CashbackRangeMix> CashbackRangeMixes { get; set; }
        public virtual DbSet<WorkShopData> WorkShopDatas { get; set; }
        public virtual DbSet<Outlet> Outlets { get; set; }
        public virtual DbSet<WorkShop> WorkShops { get; set; }
        public virtual DbSet<MgaCatalougeBanner> MgaCatalougeBanners { get; set; }
        public virtual DbSet<TargetGrowth> TargetGrowths { get; set; }
        public virtual DbSet<TargetWorkShop> TargetWorkShops { get; set; }
        public virtual DbSet<CashBack> CashBacks { get; set; }
        public virtual DbSet<Scheme> Schemes { get; set; }
        public virtual DbSet<FmsGroupSale> FmsGroupSales { get; set; }
        public virtual DbSet<AssuredGiftCategory> AssuredGiftCategories { get; set; }
        public virtual DbSet<GiftCategory> GiftCategories { get; set; }
        public virtual DbSet<WorkshopSchemesSelectedType> WorkshopSchemesSelectedTypes { get; set; }
        public virtual DbSet<RequestPartFilter> RequestPartFilters { get; set; }
        public virtual DbSet<NewPartRequest> NewPartRequests { get; set; }
        public virtual DbSet<ApprovedPartRequest> ApprovedPartRequests { get; set; }
        public virtual DbSet<DailySalesTrackerWithInvoiceData> DailySalesTrackerWithInvoiceDatas { get; set; }
        public virtual DbSet<Outstanding> Outstandings { get; set; }
        public virtual DbSet<WorkshopSchemeCashback> WorkshopSchemeCashbacks { get; set; }
        public virtual DbSet<DistributorsOutlet> DistributorsOutlets { get; set; }
    
        public virtual int Sp_AvailableStock(string role, string userId, Nullable<int> index, Nullable<int> number, string partNumber, Nullable<int> outletId, Nullable<int> stockColorId)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var outletIdParameter = outletId.HasValue ?
                new ObjectParameter("OutletId", outletId) :
                new ObjectParameter("OutletId", typeof(int));
    
            var stockColorIdParameter = stockColorId.HasValue ?
                new ObjectParameter("StockColorId", stockColorId) :
                new ObjectParameter("StockColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AvailableStock", roleParameter, userIdParameter, indexParameter, numberParameter, partNumberParameter, outletIdParameter, stockColorIdParameter);
        }
    
        public virtual int Sp_DailySalesData(string role, string userId, Nullable<int> index, Nullable<int> number, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DailySalesData", roleParameter, userIdParameter, indexParameter, numberParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_wallet_Result> sp_wallet(string queryType, Nullable<int> workshopId, string userId, Nullable<decimal> walletAmount, Nullable<int> index, Nullable<long> nextFetchRow, string couponNumber, Nullable<int> distributorId)
        {
            var queryTypeParameter = queryType != null ?
                new ObjectParameter("QueryType", queryType) :
                new ObjectParameter("QueryType", typeof(string));
    
            var workshopIdParameter = workshopId.HasValue ?
                new ObjectParameter("WorkshopId", workshopId) :
                new ObjectParameter("WorkshopId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var walletAmountParameter = walletAmount.HasValue ?
                new ObjectParameter("WalletAmount", walletAmount) :
                new ObjectParameter("WalletAmount", typeof(decimal));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("Index", index) :
                new ObjectParameter("Index", typeof(int));
    
            var nextFetchRowParameter = nextFetchRow.HasValue ?
                new ObjectParameter("NextFetchRow", nextFetchRow) :
                new ObjectParameter("NextFetchRow", typeof(long));
    
            var couponNumberParameter = couponNumber != null ?
                new ObjectParameter("CouponNumber", couponNumber) :
                new ObjectParameter("CouponNumber", typeof(string));
    
            var distributorIdParameter = distributorId.HasValue ?
                new ObjectParameter("DistributorId", distributorId) :
                new ObjectParameter("DistributorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_wallet_Result>("sp_wallet", queryTypeParameter, workshopIdParameter, userIdParameter, walletAmountParameter, indexParameter, nextFetchRowParameter, couponNumberParameter, distributorIdParameter);
        }
    
        public virtual int usp_SalesAndGrowth(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> groupId, string frequency, string growth, string role, string userId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var growthParameter = growth != null ?
                new ObjectParameter("Growth", growth) :
                new ObjectParameter("Growth", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SalesAndGrowth", startDateParameter, endDateParameter, groupIdParameter, frequencyParameter, growthParameter, roleParameter, userIdParameter);
        }
    }
}
